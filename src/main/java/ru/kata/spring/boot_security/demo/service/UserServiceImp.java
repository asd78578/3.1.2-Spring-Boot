package ru.kata.spring.boot_security.demo.service;

import org.springframework.context.annotation.Lazy;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import ru.kata.spring.boot_security.demo.model.User;
import ru.kata.spring.boot_security.demo.repository.UserRepository;

import javax.persistence.EntityManager;
import javax.persistence.EntityNotFoundException;
import javax.persistence.PersistenceContext;
import java.util.List;

@Service
public class UserServiceImp implements UserService{
    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;

    public UserServiceImp(UserRepository userRepository, @Lazy PasswordEncoder passwordEncoder) {
        this.userRepository = userRepository;
        this.passwordEncoder = passwordEncoder;
    }

    @Override
    @Transactional(readOnly = true)
    public User findByUsername(String username) {
        User user = userRepository.findByUsername(username); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π, –∞ –Ω–µ —ç—Ç–æ—Ç –∂–µ –º–µ—Ç–æ–¥
        if (user == null) {
            throw new UsernameNotFoundException("User not found: " + username);
        }
        return user;
    }


    @Override
    @Transactional(readOnly = true)
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        return findByUsername(username);
    }

    @Override
    @Transactional(readOnly = true)
    public List<User> getUsersList() {
        return userRepository.findAll();
    }

    @Override
    @Transactional(readOnly = true)
    public User getUser(Integer id) {
        return userRepository.findById(id)
                .orElseThrow(() -> new EntityNotFoundException("User not found with id: " + id));
    }

    @Override
    @Transactional
    public void addUser(User user) {
        user.setPassword(passwordEncoder.encode(user.getPassword()));
        userRepository.save(user);
    }

    @Override
    @Transactional
    public void deleteUser(Integer id) {
        userRepository.deleteById(id);
    }

    @Override
    @Transactional
    public void editUser(User user) {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        User existingUser = getUser(user.getId());

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
        String currentEncryptedPassword = existingUser.getPassword();

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        existingUser.setName(user.getName());
        existingUser.setSurname(user.getSurname());
        existingUser.setAge(user.getAge());
        existingUser.setUsername(user.getUsername());
        existingUser.setRoles(user.getRoles());

        // –£–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–ª—è
        String newPassword = user.getPassword();
        if (shouldUpdatePassword(newPassword, currentEncryptedPassword)) {
            // –ü–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω–∏–ª—Å—è - —à–∏—Ñ—Ä—É–µ–º –Ω–æ–≤—ã–π
            existingUser.setPassword(passwordEncoder.encode(newPassword));
            System.out.println("üîê –ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + user.getUsername());
        } else {
            // –ü–∞—Ä–æ–ª—å –Ω–µ –º–µ–Ω—è–ª—Å—è - –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–π
            existingUser.setPassword(currentEncryptedPassword);
            System.out.println("‚ö° –ü–∞—Ä–æ–ª—å –Ω–µ –∏–∑–º–µ–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + user.getUsername());
        }

        userRepository.save(existingUser);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –ø–∞—Ä–æ–ª—å

    private boolean shouldUpdatePassword(String newPassword, String currentEncryptedPassword) {
        // 1. –ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å null –∏–ª–∏ –ø—É—Å—Ç–æ–π - –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º
        if (newPassword == null || newPassword.trim().isEmpty()) {
            return false;
        }

        // 2. –ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å —É–∂–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω (—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, —ç—Ç–æ —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å –∏–∑ —Ñ–æ—Ä–º—ã) - –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º
        if (isPasswordEncrypted(newPassword)) {
            return false;
        }

        // 3. –ï—Å–ª–∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–∏–º (–ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏) - –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º
        if (passwordEncoder.matches(newPassword, currentEncryptedPassword)) {
            return false;
        }

        // 4. –í–æ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö - –ø–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω–∏–ª—Å—è, –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å
        return true;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞—Ä–æ–ª—å —É–∂–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º

    private boolean isPasswordEncrypted(String password) {
        return password.startsWith("$2a$") || password.startsWith("$2b$");
    }
}

